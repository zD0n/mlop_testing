# ชื่อของ Workflow
name: MLOps Pipeline CI/CT/CD


# กำหนดเงื่อนไขการรัน: เมื่อมีการ push หรือ pull request ไปยัง branch 'main'
on:
  push:
    branches: [ "main" ] 
  pull_request:
    branches: [ "main" ]

env:
  MODEL_NAME: "emotion-classifier"
  INITIAL_EPOCHS: 10

jobs:
  # --- JOB ใหม่ที่เพิ่มเข้ามาสำหรับ CI ---
  ci-checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # การดึงโค้ด (checkout)" จาก Repository ของคุณลงมาไว้บนเครื่อง


    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'


    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r pipeline/requirements.txt
        # ติดตั้งเครื่องมือสำหรับ Linting และ Testing
        pip install flake8 pytest pandas


    - name: Lint with flake8
      # ตรวจสอบคุณภาพและความถูกต้องของโค้ด Python
      run: |
        flake8 pipeline/scripts --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 pipeline/scripts --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics


    - name: Test with pytest
      # pytest 
      run: |
        pytest || (if [ $? -eq 5 ]; then echo "Pytest finished: No tests found."; exit 0; else exit $?; fi)


  build-and-train:
    # ทำให้ job นี้ต้องรันหลังจาก ci-checks สำเร็จเท่านั้น
    needs: ci-checks
    runs-on: ubuntu-latest
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}


    steps:
    - name: Checkout repository
      uses: actions/checkout@v4


    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'


    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r pipeline/requirements.txt


    - name: Run Data Validation
      run: python pipeline/scripts/data_validation.py


    - name: Run Data Preprocessing
      id: preprocessing
      run: python pipeline/scripts/data_preprocessing.py


    - name: Build and Train the model
      id: train
      run: |
        python pipeline/scripts/train_evaluate_register.py \
          ${{ steps.preprocessing.outputs.run_id }} \
          $INITIAL_EPOCHS \
          "$MODEL_NAME" \
          0.8

    - name: Train in Batches and Try Transition
      run: |
        MAX_RETRIES=5
        COUNT=0
        BEST_THRESHOLD=0.8   # starting threshold
        EPOCHS=$INITIAL_EPOCHS

        while [ $COUNT -lt $MAX_RETRIES ]; do
          echo "==== Training batch $((COUNT+1)) with BEST_THRESHOLD=$BEST_THRESHOLD ===="

          for i in {1..5}; do
            echo "---- Training run $i in batch ----"

            # Run training, capture accuracy to a file
            ACC=$(python pipeline/scripts/train_evaluate_register.py \
              ${{ steps.preprocessing.outputs.run_id }} \
              $EPOCHS \
              "$MODEL_NAME" \
              $BEST_THRESHOLD | tee /dev/stderr | grep "Test Accuracy:" | awk '{print $3}')

            echo "Got accuracy: $ACC"

            # Update BEST_THRESHOLD if improved
            if (( $(echo "$ACC > $BEST_THRESHOLD" | bc -l) )); then
              BEST_THRESHOLD=$ACC
              echo "Updated BEST_THRESHOLD=$BEST_THRESHOLD"
            fi

            EPOCHS=$((EPOCHS+1))
          done

          echo "==== Finished 5 runs, trying transition with BEST_THRESHOLD=$BEST_THRESHOLD ===="

          if python pipeline/scripts/transition_model.py "$MODEL_NAME" "Staging"; then
            echo "Transition succeeded "
            exit 0
          fi

          echo "Transition failed after batch $((COUNT+1)). Retrying training batch..."
          COUNT=$((COUNT+1))
          EPOCHS=$((EPOCHS+5))   # bump epochs more aggressively each batch
        done

        echo " Transition failed after $MAX_RETRIES batches (25 runs total)"
        exit 1

    - name: Upload MLflow artifacts for inspection
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: mlflow-artifacts
        path: mlruns/

    - name: Upload trained model
      uses: actions/upload-artifact@v4
      with:
        name: model
        path: model.pkl